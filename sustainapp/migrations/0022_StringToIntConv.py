# Generated by Django 4.2.4 on 2025-03-27 11:37

from django.db import migrations
import re


def convert_value(value):
    """
    If the value is an integer, return it directly.
    If it is a string, extract all digits and convert them to int.
    If no digits are found, return 0.
    """
    if isinstance(value, int):
        return value
    if isinstance(value, str):
        # Extract all digit characters and join them
        digits = "".join(re.findall(r"\d+", value))
        if digits:
            return int(digits)
    return 0


def forwards_func(apps, schema_editor):
    # Get models from the historical version using apps.get_model
    Organization = apps.get_model("sustainapp", "Organization")
    Corporateentity = apps.get_model("sustainapp", "Corporateentity")
    Location = apps.get_model("sustainapp", "Location")

    # List of models to update
    models_to_update = [Organization, Corporateentity, Location]

    for Model in models_to_update:
        for instance in Model.objects.all():
            changed = False

            # Convert employeecount
            original_emp = instance.employeecount
            new_emp = convert_value(original_emp)
            if new_emp != original_emp:
                instance.employeecount = new_emp
                changed = True

            # Convert revenue
            original_rev = instance.revenue
            new_rev = convert_value(original_rev)
            if new_rev != original_rev:
                instance.revenue = new_rev
                changed = True

            if changed:
                instance.save()


def reverse_func(apps, schema_editor):
    """
    For the reverse migration, we simply cast the integer values back to strings.
    Note: This does not restore any non-digit information that may have been lost.
    """
    Organization = apps.get_model("sustainapp", "Organization")
    Corporateentity = apps.get_model("sustainapp", "Corporateentity")
    Location = apps.get_model("sustainapp", "Location")

    models_to_update = [Organization, Corporateentity, Location]

    for Model in models_to_update:
        for instance in Model.objects.all():
            instance.employeecount = str(instance.employeecount)
            instance.revenue = str(instance.revenue)
            instance.save()

class Migration(migrations.Migration):

    dependencies = [
        ('sustainapp', '0021_rename_country_corporateentity_country_and_more'),
    ]

    operations = [
        migrations.RunPython(forwards_func, reverse_func),
    ]
