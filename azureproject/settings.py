"""
Django settings for azureproject project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
from django.core.management.utils import get_random_secret_key
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = os.getenv('SECRET_KEY')
SECRET_KEY = os.getenv("SECRET_KEY", get_random_secret_key())

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "False") == "True"
ALLOWED_HOSTS = os.getenv("ALLOWED_HOST").split(",")


# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
]
PROJECT_APPS = [
    "sustainapp.apps.SustainappConfig",
    "authentication.apps.AuthenticationConfig",
    "datametric.apps.DatametricConfig",
    "analysis.apps.AnalysisConfig",
    "materiality_dashboard.apps.MaterialityDashboardConfig",
    "esg_report.apps.EsgReportConfig",
    "canadabills211.apps.Canadabills211Config",
    "apps.supplier_assessment.apps.SupplierAssessmentConfig",
]

THIRD_PARTY = [
    "rest_framework",
    "rest_framework.authtoken",
    "rest_framework_simplejwt",
    "corsheaders",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "dj_rest_auth",
    "dj_rest_auth.registration",
    "simple_history",
    "storages",
    "django_filters",
]

INSTALLED_APPS = DJANGO_APPS + PROJECT_APPS + THIRD_PARTY

SITE_ID = 1
ACCOUNT_EMAIL_SUBJECT_PREFIX = ""

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "simple_history.middleware.HistoryRequestMiddleware",
    "sustainapp.Middleware.middleware.JWTMiddleware",
    "sustainapp.Middleware.middleware.MITMDetectionMiddleware",
    "sustainapp.Middleware.middleware.SessionTimeoutMiddleware",
    "sustainapp.Middleware.middleware.SecureCookiesMiddleware",
    "datametric.middleware.GeneralBusinessDetails.PathSlugMiddleware",
]

ROOT_URLCONF = "azureproject.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "azureproject.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

# Configure Postgres database for local development
#   Set these environment variables in the .env file for this project.
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("DBNAME"),
        "HOST": os.environ.get("DBHOST"),
        "USER": os.environ.get("DBUSER"),
        "PASSWORD": os.environ.get("DBPASS"),
        "PORT": int(os.environ.get("DBPORT")),
    }
}

EMAIL_REDIRECT = os.environ.get("EMAIL_REDIRECT")
EMAIL_CONFIRM_REDIRECT_BASE_URL = os.environ.get("EMAIL_CONFIRM_REDIRECT_BASE_URL")
PASSWORD_RESET_CONFIRM_REDIRECT_BASE_URL = os.environ.get(
    "PASSWORD_RESET_CONFIRM_REDIRECT_BASE_URL"
)

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# JWT Configuration
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "EXCEPTION_HANDLER": "sustainapp.utils.custom_exception_handler",
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}

# JWT TOKEN LIFETIME
# Load keys (ensure you have both a private and public key)
with open("private_key.pem", "r") as private_key_file:
    PRIVATE_KEY = private_key_file.read()

with open("public_key.pem", "r") as public_key_file:
    PUBLIC_KEY = public_key_file.read()
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LITERATURE": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "RS256",  # added new
    "SIGNING_KEY": PRIVATE_KEY,  # Correct way to use your private key
    "VERIFYING_KEY": PUBLIC_KEY,  # Optional, but recommended if you want explicit separation
}


CORS_ALLOWED_ORIGINS = os.environ.get("CORS_ALLOWED_ORIGINS", "").split(",")


CSRF_TRUSTED_ORIGINS = os.environ.get("CSRF_TRUSTED_ORIGINS", "").split(",")


ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "mandatory"

ACCOUNT_ADAPTER = "sustainapp.adapters.CustomAccountAdapter"


# SMTP settings
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
# EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

EMAIL_HOST = "smtp.office365.com"

EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "False") == "True"
EMAIL_PORT = int(os.getenv("EMAIL_PORT", 587))
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL")
CLIMATIQ_BASE_URL = os.environ.get("CLIMATIQ_BASE_URL")
ADMIN_MAIL = os.environ.get("ADMIN_MAIL").split(",")
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "django_file": {
            "class": "logging.FileHandler",
            "filename": "django.log",
            "formatter": "detailed",
        },
        "custom_file": {
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": "custom.log",
            "when": "midnight",
            "interval": 1,
            "backupCount": 7,
            "formatter": "detailed",
        },
        "warning_file": {
            "class": "logging.FileHandler",
            "filename": "warning.log",
            "formatter": "detailed",
            "level": "INFO",  # Set the level to INFO to capture both info and warning messages
        },
        "file": {
            "level": "ERROR",
            "class": "logging.FileHandler",
            "filename": os.path.join(
                BASE_DIR, "error.log"
            ),  # Change the path as needed
        },
        "user_file": {  # New handler for user.log
            "class": "logging.FileHandler",
            "filename": os.path.join(BASE_DIR, "user.log"),
            "formatter": "detailed",
            "level": "INFO",
        },
        "climatiq_file": {  # New handler for climatiq.log
            "class": "logging.FileHandler",
            "filename": os.path.join(BASE_DIR, "climatiq.log"),
            "formatter": "detailed",
            "level": "INFO",
        },
        "celery": {
            "class": "logging.FileHandler",
            "filename": os.path.join(BASE_DIR, "celery.log"),
            "formatter": "detailed",
            "level": "INFO",
        },
    },
    "loggers": {
        "": {
            "handlers": ["django_file", "warning_file"],
            "level": "INFO",  # Set the level to INFO to capture both info and warning messages
        },
        "django.utils.autoreload": {
            "handlers": ["django_file"],
            "level": "ERROR",  # Set the level to ERROR to exclude INFO messages
            "propagate": False,
        },
        "django": {
            "handlers": [
                "django_file",
            ],
            "level": "ERROR",  # Set the level to ERROR to exclude INFO messages
            "propagate": False,
        },
        "custom_logger": {
            "handlers": ["custom_file", "warning_file"],
            "propagate": False,
            "level": "INFO",  # Set the level to INFO to capture both info and warning messages
        },
        "user_logger": {  # New logger for user logins
            "handlers": ["user_file"],
            "level": "INFO",
            "propagate": False,
        },
        "climatiq_logger": {  # New logger for climatiq
            "handlers": ["climatiq_file"],
            "level": "INFO",
            "propagate": False,
        },
        "celery_logger": {
            "handlers": ["celery"],
            "level": "INFO",
            "propagate": False,
        },
    },
    "formatters": {
        "detailed": {
            "format": "{asctime} {levelname} {name} {filename} {lineno} {message}",
            "style": "{",
        },
    },
}
REDIS_URL = os.getenv("REDIS_URL")
REDIS_HOST = os.getenv("REDIS_HOST")
REDIS_PORT = os.getenv("REDIS_PORT")

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": f"{REDIS_URL}",
    }
}


CELERY_BROKER_URL = f"redis://127.0.0.1:{REDIS_PORT}/0"
CELERY_RESULT_BACKEND = f"redis://127.0.0.1:{REDIS_PORT}/0"
CELERY_TASK_ALWAYS_EAGER = False  # Ensure this is set
CELERY_TASK_ACKS_LATE = True
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"


STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# * Media Files Settings
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "mediafiles"
DEFAULT_FILE_STORAGE = "azureproject.azure_storage.AzureMediaStorage"
STATICFILES_STORAGE = "azureproject.azure_storage.AzureStaticStorage"
AZURE_STORAGE_CONNECTION_STRING = os.environ.get("AZURE_STORAGE_CONNECTION_STRING")
STATIC_LOCATION = "static"
MEDIA_LOCATION = "media"
AZURE_ACCOUNT_NAME = os.getenv("AZURE_STORAGE_ACCOUNT_NAME", None)
AZURE_CUSTOM_DOMAIN = f"{AZURE_ACCOUNT_NAME}.blob.core.windows.net"
STATIC_URL = f"https://{AZURE_CUSTOM_DOMAIN}/{STATIC_LOCATION}/"
MEDIA_URL = f"https://{AZURE_CUSTOM_DOMAIN}/{MEDIA_LOCATION}/"


AUTH_USER_MODEL = "authentication.CustomUser"

DEVELOPMENT_MODE = os.getenv("DEVELOPMENT_MODE", False) == "True"

FIXTURE_DIRS = [
    BASE_DIR / "fixtures",
]

if DEVELOPMENT_MODE:
    INSTALLED_APPS += [
        "drf_yasg",
        "django_extensions",
        "silk",
    ]
    MIDDLEWARE = [
        "silk.middleware.SilkyMiddleware",
    ] + MIDDLEWARE
    STATIC_URL = "/static/"
    STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"

AZURE_POWERBI_USERNAME = os.environ.get("AZURE_POWERBI_USERNAME")
AZURE_POWERBI_PASSWORD = os.environ.get("AZURE_POWERBI_PASSWORD")
AZURE_POWERBI_APP_ID = os.environ.get("AZURE_POWERBI_APP_ID")
AZURE_POWERBI_TENANT_ID = os.environ.get("AZURE_POWERBI_TENANT_ID")
AUTH0_CLIENT_SECRET = os.environ.get("AUTH0_CLIENT_SECRET")
AUTH0_DOMAIN = os.environ.get("AUTH0_DOMAIN")
AUTH0_CLIENT_ID = os.environ.get("AUTH0_CLIENT_ID")
